package com.growcn.ce365.service;import java.io.File;import java.io.IOException;import java.util.List;import com.growcn.ce365.db.ParagraphDb;import com.growcn.ce365.model.Paragraph;import com.growcn.ce365.util.Download;import com.growcn.ce365.util.AppConstant.ActivityParams;import com.growcn.ce365.util.AppConstant.Config;import com.growcn.ce365.util.AppConstant.Dir;import com.growcn.ce365.util.AppConstant.PlayerMsg;import android.app.Service;import android.content.Intent;import android.media.MediaPlayer;import android.media.MediaPlayer.OnCompletionListener;import android.net.Uri;import android.os.Binder;import android.os.Environment;import android.os.IBinder;import android.util.Log;public class PlayerService extends Service {	private String TAG = Config.TAG;	private boolean isPlaying = false;	private boolean isPause = false;	private boolean isReleased = false;	private int status = PlayerMsg.INIT_MSG;	private MediaPlayer mMediaPlayer = null;	private String LessonUuid;	/* 当前播放歌曲的索引 */	private int currentListItme = 0;	private List<Paragraph> paragraphs;	@Override	public IBinder onBind(Intent arg0) {		// initMediaPlayer();		return new MyBinder();	}	private void initMediaPlayer() {		if (mMediaPlayer == null) {			mMediaPlayer = new MediaPlayer();		}	}	/*	 * 代理方法，让sevice 外部可以调用	 */	public class MyBinder extends Binder {		public int Status() {			return getStatus();		}		public void MyPlay() {			play();		}		public void MyStop() {			stop();		}		public void MyPause() {			pause();		}		public void play_or_stop(String LessonUuid) {			PlayOrStop(LessonUuid);		}	}	@Override	public int onStartCommand(Intent intent, int flags, int startId) {		// int MSG = intent.getIntExtra(ActivityParams.MSG, 1);		/* 构建MediaPlayer对象 */		// Log.e(Config.TAG, ">>>>>>>>>>>>>>onstartCommand");		initMediaPlayer();		return super.onStartCommand(intent, flags, startId);	}	private void PlayOrStop(String LessonUuid) {		paragraphs = ParagraphDb.findAll(LessonUuid);		// /Log.e(TAG,		// "PlayerService ------- MSG:"		// + msg);		if (this.LessonUuid != null && this.LessonUuid.equals(LessonUuid)) {			Log.e(TAG, "1 PlayerService ------- LessonUuid:" + LessonUuid);			if (status == PlayerMsg.STOP_MSG || status == PlayerMsg.PAUSE_MSG) {				play();			} else {				stop();			}		} else {			currentListItme = 0;			this.LessonUuid = LessonUuid;			Log.e(TAG, "2 PlayerService ------- LessonUuid:" + LessonUuid);			play();		}		// switch (status) {		// case PlayerMsg.PLAY_MSG:		// play();		// break;		// case PlayerMsg.PAUSE_MSG:		// pause();		// break;		// case PlayerMsg.STOP_MSG:		// stop();		// break;		// default:		// break;		// }	}	private int getStatus() {		return status;	}	private void play() {		// Log.e(TAG, " PlayerService -------play()");		stop();		playMusic();	}	private void stop() {		// Log.e(TAG, " PlayerService -------stop()");		status = PlayerMsg.STOP_MSG;		if (mMediaPlayer != null) {			try {				mMediaPlayer.stop();				mMediaPlayer.release();				mMediaPlayer = null;			} catch (Exception e) {				// TODO: handle exception			}		}	}	private void pause() {		status = PlayerMsg.PAUSE_MSG;		if (mMediaPlayer != null) {			try {				if (!isPause) {					mMediaPlayer.pause();					isPause = true;				} else {					mMediaPlayer.start();					isPause = false;				}			} catch (Exception e) {				// TODO: handle exception			}		}	}	private void playMusic() {		status = PlayerMsg.PLAY_MSG;		initMediaPlayer();		Paragraph mParagraph = paragraphs.get(currentListItme);		String file_name = mParagraph.uuid + ".mp3";		String mFile = Dir.DLAudio() + file_name;		if (!new File(mFile).exists()) {			down_and_play(mParagraph.audio_url, file_name);			return;		}		if (mMediaPlayer != null) {			try {				/* 重置MediaPlayer */				mMediaPlayer.reset();				/* 设置要播放的文件的路径 */				mMediaPlayer.setDataSource(mFile);				/* 准备播放 */				mMediaPlayer.prepare();				/* 开始播放 */				mMediaPlayer.start();				mMediaPlayer						.setOnCompletionListener(new OnCompletionListener() {							public void onCompletion(MediaPlayer arg0) {								// 播放完成一首之后进行下一首								LoopMusic();							}						});			} catch (IOException e) {				Log.e(Config.TAG, "IOException error:" + e.getMessage());			}		}	}	private void LoopMusic() {		if (++currentListItme >= paragraphs.size()) {			currentListItme = 0;		}		playMusic();	}	/**	 * 	 * 下载并播放mp3文件	 * 	 * 	 * @param url	 *            下载地址	 * 	 * @param localPath	 *            本地存放地址	 * 	 * @param DLname	 *            下载以后的命名	 * 	 * 	 */	private void down_and_play(String url, String DLname) {		Download d = new Download(1, url, Dir.DLAudio(), DLname);		d.setOnDownloadListener(new Download.OnDownloadListener() {			@Override			public void onSuccess(int downloadId) {				System.out.println(downloadId + "下载成功");				playMusic();			}			@Override			public void onStart(int downloadId, long fileSize) {				System.out.println(downloadId + "开始下载，文件大小：" + fileSize);			}			@Override			public void onPublish(int downloadId, long size) {				System.out.println("更新文件" + downloadId + "大小：" + size);			}			@Override			public void onPause(int downloadId) {				System.out.println("暂停下载" + downloadId);			}			@Override			public void onGoon(int downloadId, long localSize) {				Log.e(Config.TAG, "继续下载" + downloadId);			}			@Override			public void onError(int downloadId) {				System.out.println("下载出错" + downloadId);			}			@Override			public void onCancel(int downloadId) {				System.out.println("取消下载" + downloadId);			}		});		d.start(false);	}}