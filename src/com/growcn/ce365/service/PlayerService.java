package com.growcn.ce365.service;import java.io.File;import java.io.IOException;import java.util.List;import com.growcn.ce365.db.ParagraphDb;import com.growcn.ce365.model.Paragraph;import com.growcn.ce365.util.Download;import com.growcn.ce365.util.AppConstant.ActivityParams;import com.growcn.ce365.util.AppConstant.Config;import com.growcn.ce365.util.AppConstant.Dir;import com.growcn.ce365.util.AppConstant.PlayerMsg;import android.app.Service;import android.content.Intent;import android.media.MediaPlayer;import android.media.MediaPlayer.OnCompletionListener;import android.net.Uri;import android.os.Environment;import android.os.IBinder;import android.util.Log;public class PlayerService extends Service {	private String TAG = Config.TAG;	private boolean isPlaying = false;	private boolean isPause = false;	private boolean isReleased = false;	private MediaPlayer mMediaPlayer = null;	private String LessonUuid;	/* 当前播放歌曲的索引 */	private int currentListItme = 0;	private List<Paragraph> paragraphs;	@Override	public IBinder onBind(Intent arg0) {		// TODO Auto-generated method stub		return null;	}	@Override	public int onStartCommand(Intent intent, int flags, int startId) {		int MSG = intent.getIntExtra(ActivityParams.MSG, 1);		LessonUuid = intent.getStringExtra(ActivityParams.LessonUuid);		paragraphs = ParagraphDb.findAll(LessonUuid);		/* 构建MediaPlayer对象 */		mMediaPlayer = new MediaPlayer();		Log.e(TAG, "PlayerService ------- MSG:" + MSG);		Log.e(TAG, "PlayerService ------- LessonUuid:" + LessonUuid);		switch (MSG) {		case PlayerMsg.PLAY_MSG:			stop();			play();			break;		case PlayerMsg.PAUSE_MSG:			pause();			break;		case PlayerMsg.STOP_MSG:			stop();			break;		default:			break;		}		return super.onStartCommand(intent, flags, startId);	}	private void play() {		playMusic();	}	private void stop() {		if (mMediaPlayer != null) {			if (isPlaying) {				if (!isReleased) {					mMediaPlayer.stop();					mMediaPlayer.release();					isReleased = true;				}				isPlaying = false;			}		}	}	private void pause() {		if (mMediaPlayer != null) {			if (!isReleased) {				if (!isPause) {					mMediaPlayer.pause();					isPause = true;					isPlaying = true;				} else {					mMediaPlayer.start();					isPause = false;				}			}		}	}	private void playMusic() {		Paragraph mParagraph = paragraphs.get(currentListItme);		String file_name = mParagraph.uuid + ".mp3";		String mFile = Dir.DLAudio() + file_name;		if (!new File(mFile).exists()) {			down_and_play(mParagraph.audio_url, file_name);			return;		}		try {			/* 重置MediaPlayer */			mMediaPlayer.reset();			/* 设置要播放的文件的路径 */			mMediaPlayer.setDataSource(mFile);			/* 准备播放 */			mMediaPlayer.prepare();			/* 开始播放 */			mMediaPlayer.start();			mMediaPlayer.setOnCompletionListener(new OnCompletionListener() {				public void onCompletion(MediaPlayer arg0) {					// 播放完成一首之后进行下一首					LoopMusic();				}			});		} catch (IOException e) {			Log.e(Config.TAG, "IOException error:" + e.getMessage());		}	}	private void LoopMusic() {		if (++currentListItme >= paragraphs.size()) {			currentListItme = 0;		}		playMusic();	}	/**	 * 	 * 下载并播放mp3文件	 * 	 * 	 * @param url	 *            下载地址	 * 	 * @param localPath	 *            本地存放地址	 * 	 * @param DLname	 *            下载以后的命名	 * 	 * 	 */	private void down_and_play(String url, String DLname) {		Download d = new Download(1, url, Dir.DLAudio(), DLname);		d.setOnDownloadListener(new Download.OnDownloadListener() {			@Override			public void onSuccess(int downloadId) {				System.out.println(downloadId + "下载成功");				playMusic();			}			@Override			public void onStart(int downloadId, long fileSize) {				System.out.println(downloadId + "开始下载，文件大小：" + fileSize);			}			@Override			public void onPublish(int downloadId, long size) {				System.out.println("更新文件" + downloadId + "大小：" + size);			}			@Override			public void onPause(int downloadId) {				System.out.println("暂停下载" + downloadId);			}			@Override			public void onGoon(int downloadId, long localSize) {				Log.e(Config.TAG, "继续下载" + downloadId);			}			@Override			public void onError(int downloadId) {				System.out.println("下载出错" + downloadId);			}			@Override			public void onCancel(int downloadId) {				System.out.println("取消下载" + downloadId);			}		});		d.start(false);	}}