package com.growcn.ce365.db;import java.io.File;import java.util.ArrayList;import java.util.Date;import java.util.List;import com.growcn.ce365.model.Lesson;import com.growcn.ce365.model.Paragraph;import com.growcn.ce365.util.AppConstant.Config;import android.content.ContentValues;import android.content.Context;import android.database.Cursor;import android.database.SQLException;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteDatabase.CursorFactory;import android.database.sqlite.SQLiteOpenHelper;import android.util.Log;public class ParagraphDb extends GrowcnDB {	private static final int DABABASE_VERSION = 1;	public static String TABLE_NAME = "paragraphs";	private static final String fTag = Config.TAG + TABLE_NAME;	public static final String TABLE_FIELD_ID = "id";	public static final String TABLE_FIELD_NAME = "name";	public static final String TABLE_FIELD_TRANSLATION = "translation";	public static final String TABLE_FIELD_UUID = "uuid";	public static final String TABLE_FIELD_LESSON_UUID = "lesson_uuid";	public static final String TABLE_FIELD_SORT = "sort";	public static final String TABLE_FIELD_AUIDO_URL = "audio_url";	public static final String TABLE_FIELD_LAST_TIME = "lastmodifytime";	public static void create(SQLiteDatabase db) {		try {			db.execSQL("CREATE TABLE IF NOT EXISTS " + TABLE_NAME + " ("					+ TABLE_FIELD_ID + " INTEGER PRIMARY KEY NOT NULL, "					+ TABLE_FIELD_NAME + " VARCHER NOT NULL, "					+ TABLE_FIELD_TRANSLATION + " VARCHER NOT NULL, "					+ TABLE_FIELD_AUIDO_URL + " VARCHER NOT NULL, "					+ TABLE_FIELD_UUID + " VARCHER NOT NULL,"					+ TABLE_FIELD_LESSON_UUID + " VARCHER NOT NULL,"					+ TABLE_FIELD_SORT + " INTEGER NOT NULL,"					+ TABLE_FIELD_LAST_TIME + " INTEGER NOT NULL " + ");");		} catch (SQLException ex) {			Log.e(fTag, ex.toString());		}	}	/**	 * 添加数据	 * 	 * @param id	 * @param name	 * @param uuid	 * @param lastmodifytime	 */	public static void add(String lesson_uuid, Paragraph paragraph) {		try {			SQLiteDatabase db = DBBaseHelper.getInstance()					.getWritableDatabase();			if (db.isOpen()) {				ContentValues values = new ContentValues();				// values.put(TABLE_FIELD_ID, paragraph.id);				values.put(TABLE_FIELD_LESSON_UUID, lesson_uuid);				values.put(TABLE_FIELD_UUID, paragraph.uuid);				values.put(TABLE_FIELD_NAME, paragraph.name);				values.put(TABLE_FIELD_TRANSLATION, paragraph.translation);				values.put(TABLE_FIELD_AUIDO_URL, paragraph.audio_url);				values.put(TABLE_FIELD_SORT, paragraph.sort);				values.put(TABLE_FIELD_LAST_TIME, paragraph.lastmodifytime);				db.insert(TABLE_NAME, null, values);				db.close();			}		} catch (SQLException e) {			Log.e(fTag, e.toString());		}	}	private static String whereLessonUuidAndUuid() {		String where = TABLE_FIELD_LESSON_UUID + "=?";		where += " and ";		where += TABLE_FIELD_UUID + "=?";		return where;	}	public static void find_lessonUuid_and_uuid_update(String lesson_uuid,			Paragraph paragraph) {		try {			SQLiteDatabase db = DBBaseHelper.getInstance()					.getWritableDatabase();			if (db.isOpen()) {				ContentValues values = new ContentValues();				values.put(TABLE_FIELD_ID, paragraph.id);				values.put(TABLE_FIELD_NAME, paragraph.name);				values.put(TABLE_FIELD_TRANSLATION, paragraph.translation);				values.put(TABLE_FIELD_AUIDO_URL, paragraph.audio_url);				values.put(TABLE_FIELD_SORT, paragraph.sort);				values.put(TABLE_FIELD_LAST_TIME, paragraph.lastmodifytime);				String where = whereLessonUuidAndUuid();				db.update(TABLE_NAME, values, where, new String[] {						lesson_uuid, paragraph.uuid });				db.close();			}		} catch (SQLException e) {			Log.e(fTag, e.toString());		}	}	/*	 * 查找所有的数据	 */	public static List<Paragraph> findAll(String lessonUuid) {		List<Paragraph> paragraphs = null;		try {			SQLiteDatabase db = DBBaseHelper.getInstance()					.getReadableDatabase();			if (db.isOpen()) {				Cursor cursor = db.query(TABLE_NAME, null,						TABLE_FIELD_LESSON_UUID + "=?",						new String[] { lessonUuid }, null, null,						TABLE_FIELD_SORT + " ASC");				paragraphs = new ArrayList<Paragraph>();				try {					while (cursor.moveToNext()) {						Paragraph mParagraph = new Paragraph();						mParagraph = setParagraph(cursor);						paragraphs.add(mParagraph);					}				} finally {					if (!cursor.isClosed()) {						cursor.close();						cursor = null;					}					if (db.isOpen()) {						db.close();						db = null;					}				}			}		} catch (SQLException e) {			Log.e(fTag, e.toString());		}		return paragraphs;	}	/**	 * uuid 是否在	 * 	 * @param uuid	 * @return true| false	 */	public static boolean Find_By_LessonUuid_And_Uuid_Exists(			String lesson_uuid, String uuid) {		boolean result = false;		try {			SQLiteDatabase db = DBBaseHelper.getInstance()					.getReadableDatabase();			if (db.isOpen()) {				String where = whereLessonUuidAndUuid();				Cursor cursor = db.query(TABLE_NAME, null, where, new String[] {						lesson_uuid, uuid }, null, null, null);				try {					if (cursor.moveToFirst()) {						result = true;					}				} finally {					if (!cursor.isClosed()) {						cursor.close();						cursor = null;					}					if (db.isOpen()) {						db.close();						db = null;					}				}			}		} catch (SQLException e) {			Log.e(fTag, e.toString());		}		return result;	}	/**	 * 	 * @param LessonUuid	 * @param uuid	 * @return Paragraph	 */	public static Paragraph FindByUuid(String LessonUuid, String uuid) {		Paragraph mParagraph = null;		SQLiteDatabase db = DBBaseHelper.getInstance().getReadableDatabase();		if (db.isOpen()) {			Cursor cursor = db.query(TABLE_NAME, null,					whereLessonUuidAndUuid(),					new String[] { LessonUuid, uuid }, null, null,					TABLE_FIELD_SORT + " ASC " + " limit 1");			try {				while (cursor.moveToNext()) {					mParagraph = setParagraph(cursor);				}			} finally {				if (!cursor.isClosed()) {					cursor.close();					cursor = null;				}				if (db.isOpen()) {					db.close();					db = null;				}			}		}		return mParagraph;	}	private static Paragraph setParagraph(Cursor cursor) {		Paragraph paragraph = new Paragraph();		paragraph.id = cursor.getInt(cursor.getColumnIndex(TABLE_FIELD_ID));		paragraph.lesson_uuid = cursor.getString(cursor				.getColumnIndex(TABLE_FIELD_LESSON_UUID));		paragraph.uuid = cursor.getString(cursor				.getColumnIndex(TABLE_FIELD_UUID));		paragraph.name = cursor.getString(cursor				.getColumnIndex(TABLE_FIELD_NAME));		paragraph.translation = cursor.getString(cursor				.getColumnIndex(TABLE_FIELD_TRANSLATION));		paragraph.audio_url = cursor.getString(cursor				.getColumnIndex(TABLE_FIELD_AUIDO_URL));		paragraph.sort = cursor.getInt(cursor.getColumnIndex(TABLE_FIELD_SORT));		paragraph.lastmodifytime = cursor.getInt(cursor				.getColumnIndex(TABLE_FIELD_LAST_TIME));		return paragraph;	}	/**	 * 删除不存在的数据	 * 	 * @param lessons	 */	public static void DeleteRedundant(String lessionUuid,			List<Paragraph> paragraphs) {		try {			if (paragraphs != null) {				SQLiteDatabase db = DBBaseHelper.getInstance()						.getReadableDatabase();				if (db.isOpen()) {					// sql statement					StringBuilder inQuery = new StringBuilder();					inQuery.append("(");					boolean first = true;					for (int i = 0; i < paragraphs.size(); i++) {						Paragraph paragraph = paragraphs.get(i);						if (first) {							first = false;							inQuery.append("'").append(paragraph.uuid)									.append("'");						} else {							inQuery.append(", '").append(paragraph.uuid)									.append("'");						}					}					inQuery.append(")");					// sql statement					db.delete(TABLE_NAME, TABLE_FIELD_LESSON_UUID + " = '"							+ lessionUuid + "' and " + TABLE_FIELD_UUID							+ " not in " + inQuery.toString(), null);					db.close();				}			}		} catch (SQLException e) {			Log.e(fTag, e.toString());		}	}	/**	 * 同步book数据	 */	public static void sync(String lesson_uuid, Paragraph paragraph) {		Paragraph mParagraph = FindByUuid(lesson_uuid, paragraph.uuid);		if (mParagraph != null) {			// Paragraph是否要更新			if (mParagraph.lastmodifytime != paragraph.lastmodifytime) {				find_lessonUuid_and_uuid_update(lesson_uuid, paragraph);			}		} else {			// Paragraph不存在			add(lesson_uuid, paragraph);		}		// Log.e("cgg", ".lesson_uuid:" + lesson_uuid + "|uuid:" +		// paragraph.uuid);		// Paragraph mParagraph = paragraph;		// if (Find_By_LessonUuid_And_Uuid_Exists(lesson_uuid, paragraph.uuid))		// {		// // Log.e("cgg", ".1lesson_uuid.." + lesson_uuid);		// find_lessonUuid_and_uuid_update(lesson_uuid, paragraph);		// } else {		// // Log.e("cgg", ".2lesson_uuid.." + lesson_uuid);		// add(lesson_uuid, paragraph);		// }	}	// private isOpenDb() {	//	// }	// @Override	// public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)	// {	// // If you need to add a new column	// if (newVersion > oldVersion) {	// int upgradeTo = oldVersion + 1;	// while (upgradeTo <= newVersion) {	// switch (upgradeTo) {	// case 7:	//	// break;	// case 8:	//	// break;	// case 9:	//	// break;	// case 11:	//	// break;	// }	//	// upgradeTo++;	// }	// }	//	// }}